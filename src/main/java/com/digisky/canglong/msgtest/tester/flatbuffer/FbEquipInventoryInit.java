// automatically generated by the FlatBuffers compiler, do not modify

package com.digisky.canglong.msgtest.tester.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FbEquipInventoryInit extends Table {
    public static FbEquipInventoryInit getRootAsFbEquipInventoryInit(ByteBuffer _bb) {
        return getRootAsFbEquipInventoryInit(_bb, new FbEquipInventoryInit());
    }
    
    public static FbEquipInventoryInit getRootAsFbEquipInventoryInit(ByteBuffer _bb, FbEquipInventoryInit obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }
    
    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }
    
    public FbEquipInventoryInit __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }
    
    public int type() {
        int o = __offset(4);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }
    
    public FbEquip equips(int j) {
        return equips(new FbEquip(), j);
    }
    
    public FbEquip equips(FbEquip obj, int j) {
        int o = __offset(6);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }
    
    public int equipsLength() {
        int o = __offset(6);
        return o != 0 ? __vector_len(o) : 0;
    }
    
    public int extralCapacity() {
        int o = __offset(8);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }
    
    public static int createFbEquipInventoryInit(FlatBufferBuilder builder,
                                                 int type,
                                                 int equipsOffset,
                                                 int extralCapacity) {
        builder.startObject(3);
        FbEquipInventoryInit.addExtralCapacity(builder, extralCapacity);
        FbEquipInventoryInit.addEquips(builder, equipsOffset);
        FbEquipInventoryInit.addType(builder, type);
        return FbEquipInventoryInit.endFbEquipInventoryInit(builder);
    }
    
    public static void startFbEquipInventoryInit(FlatBufferBuilder builder) {
        builder.startObject(3);
    }
    
    public static void addType(FlatBufferBuilder builder, int type) {
        builder.addInt(0, type, 0);
    }
    
    public static void addEquips(FlatBufferBuilder builder, int equipsOffset) {
        builder.addOffset(1, equipsOffset, 0);
    }
    
    public static int createEquipsVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }
    
    public static void startEquipsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }
    
    public static void addExtralCapacity(FlatBufferBuilder builder, int extralCapacity) {
        builder.addInt(2, extralCapacity, 0);
    }
    
    public static int endFbEquipInventoryInit(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }
    
    public static void finishFbEquipInventoryInitBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }
    
    public static void finishSizePrefixedFbEquipInventoryInitBuffer(FlatBufferBuilder builder, int offset) {
        builder.finishSizePrefixed(offset);
    }
}

